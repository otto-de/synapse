buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        //Needed only for SNAPSHOT versions
        //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
        //classpath "com.adarshr:gradle-test-logger-plugin:3.2.0"
    }
}

//import org.gradle.api.tasks.testing.logging.TestExceptionFormat
//import org.gradle.api.tasks.testing.logging.TestLogEvent

ext {
    awsSdkVersion = "2.18.4"
    springVersion = "5.3.23"
    springSecurityVersion = "5.7.4"
    springBootVersion = "2.7.5"
    edisonVersion = "2.7.5"
    jacksonVersion = "2.13.4"
    logbackVersion = "1.2.11"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'io.codearte.nexus-staging'
apply from: "${rootDir}/jacoco.gradle"

task startLocalStack(type:Exec) {
    commandLine "docker", "run", "--name", "synapse_localstack", "-d", "-p", "4566:4566", "localstack/localstack:0.14.5"
}
task stopLocalStack(type: Exec) {
    commandLine 'docker', 'rm', '-f', 'synapse_localstack'
}

nexusStaging {
    username=sonatypeUsername
    password=sonatypePassword
    packageGroup='de.otto'
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    //apply plugin: "com.adarshr.test-logger"
    apply from: "${rootDir}/jacoco.gradle"

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    dependencies {
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    }

    task allDeps(type: DependencyReportTask) {}

    compileJava.dependsOn(processResources)

    version = '0.25.3-SNAPSHOT'
    group = 'de.otto.synapse'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

//    testlogger {
//        showStandardStreams true
//        showPassedStandardStreams false
//        showSkippedStandardStreams false
//        showFailedStandardStreams true
//    }

//    tasks.withType(Test) {
//        testLogging {
//            // set options for log level LIFECYCLE
//            events TestLogEvent.FAILED,
//                    TestLogEvent.PASSED,
//                    TestLogEvent.SKIPPED,
//                    TestLogEvent.STANDARD_OUT
//            exceptionFormat TestExceptionFormat.FULL
//            showExceptions true
//            showCauses true
//            showStackTraces true
//
//            // set options for log level DEBUG and INFO
//            debug {
//                events TestLogEvent.STARTED,
//                        TestLogEvent.FAILED,
//                        TestLogEvent.PASSED,
//                        TestLogEvent.SKIPPED,
//                        TestLogEvent.STANDARD_ERROR,
//                        TestLogEvent.STANDARD_OUT
//                exceptionFormat TestExceptionFormat.FULL
//            }
//            info.events = debug.events
//            info.exceptionFormat = debug.exceptionFormat
//
//            afterSuite { desc, result ->
//                if (!desc.parent) { // will match the outermost suite
//                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
//                    def startItem = '|  ', endItem = '  |'
//                    def repeatLength = startItem.length() + output.length() + endItem.length()
//                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
//                }
//            }
//        }
//    }

}
